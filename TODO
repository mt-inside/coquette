Make com_read_byte loop read() until is has everything. UNIX & win. OR maybe leave it, because the asserts will catch this happening.
generalise the proxies so that reading observers and updating widgets is decoupled
move from boost to std::bind1st, some func thing, etc
qt hud stops updating sometimes. Maybe because it's being called by a different thread? Indeed, the stylesheets don't like being set from another thread, and there are occasional SEGVs in the Qt/X libraries. How to marshall? will qt do this, or do I need to poll something from the qt main thread like a pipe?
SIGINT to gracefully shutdown
make a com "interface" (abstract type and function defs) then have some kind of virtual dispatch so that coms can be interchanged (init your com_t * to be com_unix_new( ) where com_t contain
To be symmetrical, the observers should provide a callback to the layer below them (stream_frame etc) just as they are passed a callback from above.
- The signature of that callback would have to be fixed, so it's no different to
  the current set-up really.
stats_observer
- use circ buffer and only store last $period data, remember to handle 0 period
  (still needs the growing buffer)
- do proper update notifications
- look at on-line algorithms too
- stdev looks suspect - had a dataset with range 1 stdev 7. Unit test!
- means have been seen to be bollocks too. Are these both because it's
  calculating population estimates, not sample stats?
do the TODOs in stream_frame.c etc
reg_infos to gain name, unit name, range
observabled to push their new values (complex type (maybe >1 number like stats) (with units too)) in the update call, as it's silly that you just get a unit type notification then have to ask for the value.
observables to report a complex T, not just uint8 (e.g. value + reg_info). IS THIS NECESSARY? WHEN YOU REGISTER FOR UPDATES YOU SHOULD HAVE A REG_INFO TO HAND
mock ecu for testing (maybe a gui with sliders for the values)
ideally would have a consult COM service to which you could add and remove observers. Regs would be added to stream only if not already streaming. Any change to regs would stop and restart stream.

Make big-endian safe. Extracting LSB by truncation, read_reg_2bytes(), etc...
how to disconn from ecu to handshake another? Because handshakes start with two command-ends, I wonder if just send a new handshake?

observer callbacks can get their reg from their obs struct. There should be a way to look this up to pretty name and unit enum.
Derive cool stuff - instant and avg MPG, AFR (open and closed loop? ECU is always telling us MAF and fueling, only difference is how it determines fuel). Torque (from fuel and AFR?). Power (from torque and revs).
some kind of framework for unit conversion (engine speed in Hz, road spd in m/s, acceleration in G).
commands to other cpus (each cmd take an ecu and remember / switch if different? OR unified address space for registers (pair cpu & reg) - layer underneath to watch current ecu and switch if necc (sort first to reduce switching))
Mac Serial comms - ioreg -c IOSerialBSDClient. PL email - get mac driver, change PCI IDs

make look like R34 / 35 GT-R, Defi ADVANCE ZD, HKS CAMP 2
gauge observer - current value and 10 sec peak - stats observer does this (may need to be able to set window size - in seconds)
log observer...
